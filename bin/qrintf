#! /usr/bin/perl

# Copyright (c) 2015 DeNA Co., Ltd., Kazuho Oku
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
use warnings;
use Digest::SHA qw(sha1_hex);
use File::Basename qw(basename dirname);
use File::Temp qw(tempdir);
use POSIX qw(WIFEXITED WEXITSTATUS WTERMSIG);

my %EXT = (
    c  => 'i',
    m  => 'mi',
    (map { $_ => 'mii' } qw(mm M)),
    (map { $_ => 'ii' } qw(cc cp cxx cpp CPP c++ C)),
);

if (@ARGV && $ARGV[0] eq '--version') {
    print "v0.9.2\n";
    exit 0;
} elsif (@ARGV < 2 || grep { $_ =~ /^(-h|--help)$/s } @ARGV) {
    print "Usage: $0 compiler [compiler-options...] filename\n";
    exit 0;
}

my $pwd = dirname($0);

my $cc = shift @ARGV;

if (basename($cc) =~ m{^g(?:cc|\+\+)}) {
    # is GCC, use "-wrapper"
    exec "$cc", qw(-no-integrated-cpp -wrapper), "$pwd/../share/qrintf/gcc-wrapper", @ARGV;
    die "failed to exec $cc:$!";
} else {
    # mimic GCC's "-no-integrated-cpp -wrapper"

    # create temporary directory
    my $tempdir = tempdir(CLEANUP => 1);

    # suppress warnings like: `argument unused during compilation: '-I include'`
    unshift @ARGV, "-Qunused-arguments"
        if basename($cc) =~ m{^clang};

    # splice "-o fn" from ARGV
    my $output_fn;
    my $coption;

    for (my $i = 0; $i < @ARGV;) {
        if ($i + 1 < @ARGV && $ARGV[$i] eq '-o') {
            $output_fn = $ARGV[$i + 1];
            splice @ARGV, $i, 2;
        } else {
            if ($i < @ARGV && $ARGV[$i] eq '-c') {
                $coption = 1;
            }
            ++$i;
        }
    }

    # splice the filenames from ARGV
    my @files;
    my %tmp_fn_to_obj_fn;

    for (my $i = 0; $i < @ARGV;) {
        if ($ARGV[$i] !~ /^-/s                 # does not start with '-'
            && -e $ARGV[$i]                    # is a file
            && get_preprocessed_fn($ARGV[$i])  # is a file that is recognized as a source file
        ) {
            $tmp_fn_to_obj_fn{$ARGV[$i]} = get_preprocessed_fn($ARGV[$i])
              if !defined $output_fn && defined $coption;
            push @files, splice @ARGV, $i, 1;
        } else {
            ++$i;
        }
    }

    # preprocess the source files
    for my $fn (@files) {
        run_cmd(
            "$pwd/../share/qrintf/gcc-wrapper",
            $cc, '-E',
            (grep { $_ ne '-c' } @ARGV),
            $fn,
            '-o', get_preprocessed_fn($fn),
        );
    }

    exit 0
        if grep { $_ eq '-E' } @ARGV;

    # invoke cc
    push @ARGV, map { get_preprocessed_fn($_) } @files;
    push @ARGV, '-o', $output_fn
        if defined $output_fn;
    run_cmd($cc, @ARGV);
    #print $output_fn, $coption;
    if(!defined $output_fn && defined $coption) {
        while (my ($key, $value) = each(%tmp_fn_to_obj_fn)){
            $key =~ /\.([^\.]+)$/s;
            my $dest_fn = $`;
            $value =~ /\.([^\.]+)$/s;
            my $src_fn = $`;
            run_cmd("mv", "$src_fn.o", "$dest_fn.o");
            run_cmd("rm", $value);
        }
    }

    exit 0;
}

sub run_cmd {
    my (@argv) = @_;
    system(@argv) == 0 and return;
    if ($? == -1) {
        die "failed to exec $argv[0]:$!";
    } elsif (WIFEXITED($?)) {
        exit WEXITSTATUS($?);
    } else {
        die "$argv[0] exitted due to signal @{[WTERMSIG($?)]}\n";
    }
}

sub get_preprocessed_fn {
    my $fn = shift;
    $fn =~ /\.([^\.]+)$/s
        or return;
    my $ext = $1;
    return
        unless $EXT{$ext};
    return substr(sha1_hex($fn), 0, 12) . ".$EXT{$ext}";
}
