#! /usr/bin/perl

# Copyright (c) 2014,2015 DeNA Co., Ltd., Kazuho Oku
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
# IN THE SOFTWARE.

use strict;
use warnings;

use File::Basename qw(dirname);

if (@ARGV && $ARGV[0] eq '--version') {
    my $cmd = dirname($0) . "/qrintf";
    exec $^X, $cmd, "--version";
    die "failed to execute: $cmd:$!";
}

my $re_expr;
$re_expr = qr {
    (?:
        /\*.*?\*/
        | //[^\n]*\n?
        | " (?:\\.|[^\\"])* "
        | ' (?:\\.|[^\\'])* '
        | \( (??{ $re_expr }) (?: \s* , \s* (??{ $re_expr }) )* \)
        | [^"',()]*
    )+
}xs;

my $src = join '', <STDIN>;

# rewrite sn?printf
my @blocks = split /((?:_qp_|)sn?printf)/, $src;
$src = '';
while (@blocks) {
    my $block = shift @blocks;
    if ($src =~ /[A-Za-z0-9_]$/s) {
        $src .= $block;
    } elsif ($block =~ /^(_qp_|)sprintf$/s) {
        if ($blocks[0] =~ m{^
            (\s* \( \s*)
            ($re_expr)
            (\s*),
            (\s*)
            " ( (?:\\.|[^\\"])* ) "
            ( (?: \s* , \s* $re_expr )* )
            (\s* \))
        }xs) {
            $blocks[0] = $';
            $src .= rewrite('nck', "$block$&", $1, $2, $3, $4, $5, $6, $7);
        } else {
            $src .= 'sprintf';
        }
    } elsif ($block =~ /^(_qp_|)snprintf$/s) {
        if ($blocks[0] =~ m{^
            (\s* \( \s*)
            ($re_expr \s* , \s* $re_expr)
            (\s*),
            (\s*)
            " ( (?:\\.|[^\\"])* ) "
            ( (?: \s* , \s* $re_expr )* )
            (\s* \))
        }xs) {
            $blocks[0] = $';
            $src .= rewrite('chk', "$block$&", $1, $2, $3, $4, $5, $6, $7);
        } else {
            $src .= 'snprintf';
        }
    } else {
        $src .= $block;
    }
}

print $src;

sub _append_literal {
    my ($check, $expr, $literal) = @_;
    return $expr
        if length $literal == 0;
    return "_qrintf_${check}_c($expr, '$literal')"
        if length $literal == 1;
    return "_qrintf_${check}_s_len($expr, \"$literal\", sizeof(\"$literal\") - 1)";
}

sub rewrite {
    my ($check, $orig, $start_brace, $dst, $space_after_dst, $space_before_fmt, $fmt, $values, $end_brace) = @_;

    $orig =~ s/^_qp_//; # _qp_sprintf => sprinf

    # parse values
    my @values = ( $values =~ m{ ( \s* , \s* $re_expr ) }gxs )
        or return $orig;

    # build the expr
    my $expr = "_qrintf_${check}_init($dst)$space_after_dst$space_before_fmt";
    my $literal = '';
    for my $token (split /(%(?:%|-?0?(?:[0-9]+|\*|)(?:(?:h||l|ll|z)[uxX]|(?:h||l|ll)[di]|s|c)|\.\*s))/, $fmt) {
        if ($token =~ /^%\.\*s$/) {
            $expr = _append_literal($check, $expr, $literal);
            $literal = '';
            $expr = "_qrintf_${check}_maxwidth_s($expr" . shift(@values) . shift(@values) . ")";
        } elsif ($token =~ /^%(-?)(0?)([0-9]+|\*|)((?:h||l|ll|z)[uxX]|(?:h||l|ll)[di]|s|c)$/) {
            my ($left_adjust, $zero_pad, $width, $conv) = ($1, $2, $3, $4);
            my $extra = '';
            $expr = _append_literal($check, $expr, $literal);
            $literal = '';
            $conv =~ s/i$/d/s; # convert %?i to %?d
            if ($conv =~ /([xX])$/) {
                $extra = $1 eq 'X' ? ', "0123456789ABCDEF"' : ', "0123456789abcdef"';
                $conv =~ s/X$/x/;
            }
            if ($width ne '') {
                if ($width eq '*') {
                    $width = shift @values;
                } else {
                    $width =~ s/^0//g; # remove preceeding zeros so that it would not be considered as an octal
                    $width = ", $width";
                }
                my $pad_ch = $zero_pad ne '' ? '0' : ' ';
                $expr = "_qrintf_${check}_width_$conv($expr, '$pad_ch'$width" . shift(@values) . "$extra)";
            } else {
                $expr = "_qrintf_${check}_$conv($expr" . shift(@values) . "$extra)";
            }
        } else {
            $token =~ s/%(.?)/return $orig unless $1 eq '%'; $1/eg;
            $literal .= $token;
        }
    }
    $expr = _append_literal($check, $expr, $literal);
    $expr = "_qrintf_${check}_finalize$start_brace$expr$end_brace";

    return $expr;
}
